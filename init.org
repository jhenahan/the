#+STARTUP: showeverything
* The Heretic's Emacs
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
  #+begin_src emacs-lisp
    ;;; -*- lexical-binding: t; buffer-read-only: t -*-
  #+end_src
** Early Init
   :PROPERTIES:
   :header-args: :tangle early-init.el
   :END:
   There are a few things we want to do really early (like make
   =package.el= mind its own dang business), already.
*** Managing Startup Time
    Garbage collection can be quite expensive on startup if you have a
    lot of setup. We set it to an appropriately ridiculous number so
    we don't spend all day managing memory on boot, then put things
    back after init.
   #+begin_src emacs-lisp
     ;;; -*- lexical-binding: t; buffer-read-only: t -*-
     (defvar the--gc-cons-threshold gc-cons-threshold)
     (defvar the--gc-cons-percentage gc-cons-percentage)
     (defvar the--file-name-handler-alist file-name-handler-alist)

     (setq-default gc-cons-threshold 402653184
	    gc-cons-percentage 0.6
	    inhibit-compacting-font-caches t
	    message-log-max 16384
	    file-name-handler-alist nil)

     (add-hook 'after-init-hook
	(lambda ()
	  (setq gc-cons-threshold the--gc-cons-threshold
		gc-cons-percentage the--gc-cons-percentage
		file-name-handler-alist the--file-name-handler-alist)))

     ;; Use a hook so the message doesn't get clobbered by other messages.
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "Emacs ready in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))
   #+end_src
*** Splash Screen
    I never want to read the startup screen. Sorry, RMS.
    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
    #+end_src
*** UI
    Making fonts behave is a personal nightmare, and I definitely
    don't need any of the UI loaded. I also compile the
    =prettify-symbols= machinery for Pragmata at this stage, just
    because.
    #+begin_src emacs-lisp
     (if (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
     (if (fboundp 'menu-bar-mode)   (menu-bar-mode   -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

     (setq default-frame-alist '((font . "PragmataPro Liga-14")
			  (fullscreen . fullboth)
			  (horizontal-scroll-bars)
			  (vertical-scroll-bars)))

     (when (featurep 'ns)
       (push '(ns-transparent-titlebar . t) default-frame-alist))

     (setq frame-inhibit-implied-resize t)

     (require 'bytecomp)
     (byte-recompile-file (concat user-emacs-directory "pragmata.el") nil 0 t)
    #+end_src
*** Package Management
    My packages are managed with Nix, so I stop =package.el= in its
    tracks and do some early setup. In particular, I use =use-package=
    set too always load features lazily unless I say otherwise, and to
    dump information about package load times to make it easier to
    find slowpokes during startup.
    #+begin_src emacs-lisp
      (setq package-enable-at-startup nil)

      ;;; Set up package management
      ;;;; use-package
      (eval-when-compile
	(require 'use-package))

      ;; Tell `use-package' to always load features lazily unless told
      ;; otherwise. It's nicer to have this kind of thing be deterministic:
      ;; if `:demand' is present, the loading is eager; otherwise, the
      ;; loading is lazy. See
      ;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
      (setq use-package-always-defer t)

      ;; We care about load time in our config, so have use-package report packages
      ;; that are dragging down our startup.
      (setq use-package-verbose t)
    #+end_src
*** Trash Management
    Packages litter =.emacs.d= with cache files, configs, and other
    such nonsense. =no-littering= has an ever-expanding list of holes
    for these things to live in rather than making my version control
    sad.
    #+begin_src emacs-lisp
      (use-package no-littering :demand t)
    #+end_src
*** Easy and automatic reloads
    It's really annoying to have to think about reloading my config
    when I'm working on new stuff, so I just retangle and reload this
    Org file on save. Cheap and easy, and I get errors immediately
    rather than the next time I start Emacs.
    #+begin_src emacs-lisp
      ;; We can't tangle without org!
      (require 'org)

      (defun the-reload-and-tangle-init-org ()
	  "Tangle and reload THE config."
	  (interactive)
	  (when (string= buffer-file-name (file-truename (concat user-emacs-directory "init.org")))
	    (org-babel-tangle)
	    (byte-compile-file (concat user-emacs-directory "init.el"))
	    (load (concat user-emacs-directory "init"))))   

      (add-to-list 'safe-local-variable-values
	    '(after-save-hook . the-reload-and-tangle-init-org))

      ;; Open the configuration
      (find-file (concat user-emacs-directory "init.org"))
      ;; tangle it
      (org-babel-tangle)
      ;; load it
      (load-file (concat user-emacs-directory "init.el"))
      ;; finally byte-compile it
      (byte-compile-file (concat user-emacs-directory "init.el"))
    #+end_src
*** Feature
    Finally, we expose our early-init so Emacs can see it.
    #+begin_src emacs-lisp
      (provide 'early-init)
    #+end_src
** Basics
*** Libraries
    Emacs built-in libraries are improving, but it's still broadly a
    lot nicer to use these libraries.
**** List API
     #+begin_src emacs-lisp
       (use-package dash :demand t)
       (use-package dash-functional :demand t)
     #+end_src
**** String API
     #+begin_src emacs-lisp
      (use-package s :demand t)
     #+end_src
**** File API
     #+begin_src emacs-lisp
       (use-package f :demand t)
     #+end_src
**** Hashtable API
     #+begin_src emacs-lisp
       (use-package ht :demand t)
     #+end_src
*** Theme
    #+begin_src emacs-lisp
      (use-package doom-themes
	:demand t
	:config
	(setq doom-themes-enable-bold t
	      doom-themes-enable-italic t)
	(load-theme 'doom-gruvbox t))

      (use-package doom-themes-ext-org
	:demand t
	:config
	(doom-themes-org-config))
    #+end_src
*** Modeline
**** Pretty Icons
     #+begin_src emacs-lisp
       (use-package all-the-icons :demand t)
     #+end_src
**** Doom Modeline
     This is a pretty enough, minimalish modeline. I disable the word
     count segment because I kinda just don't care about it.
     #+begin_src emacs-lisp
       (use-package doom-modeline
	 :hook (after-init . doom-modeline-mode)
	 :init
	 (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
	 (setq doom-modeline-buffer-state-icon t)
	 (setq doom-modeline-buffer-modification-icon t)
	 (setq doom-modeline-icon t)
	 (setq doom-modeline-enable-word-count nil)
	 (setq doom-modeline-major-mode-icon t)
	 (setq doom-modeline-major-mode-color-icon t))
     #+end_src
**** Blackout
     Blackout is the only mode lighter package I've found that
     actually works with all the weird modes I use.
     #+begin_src emacs-lisp
       (use-package blackout :demand t)
       (use-package autorevert :blackout auto-revert-mode)
     #+end_src
*** Pretty Stuff
    #+begin_src emacs-lisp
      (global-prettify-symbols-mode)
      (add-hook 'text-mode-hook 'prettify-hook)
      (add-hook 'prog-mode-hook 'prettify-hook)
    #+end_src
** Macros and other conveniences
*** Operating System Detection
    #+begin_src emacs-lisp
      (defmacro the-operating-system-p (os)
	"Return non-nil if OS matches the system type.
      Allowable values for OS (not quoted) are `macOS', `osx',
      `windows', `linux', `unix'."
	(pcase os
	  (`unix `(not (memq system-type '(ms-dos windows-nt cygwin))))
	  ((or `macOS `osx) `(eq system-type 'darwin))
	  (`linux `(not (memq system-type
			      '(darwin ms-dos windows-nt cygwin))))
	  (`windows `(memq system-type '(ms-dos windows-nt cygwin)))))

      (defmacro the-with-operating-system (os &rest body)
	"If OS matches the system type, eval and return BODY. Else return nil.
      Allowable values for OS (not quoted) are `macOS', `osx',
      `windows', `linux', `unix'."
	(declare (indent 1))
	`(when (the-operating-system-p ,os)
	   ,@body))
    #+end_src
** Navigation
   #+begin_src emacs-lisp
     (use-package ivy
       :hook (after-init . ivy-mode)
       :init
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))

     (use-package counsel
       :hook (after-init . counsel-mode))

     (use-package swiper
       :bind ("C-s" . swiper))
   #+end_src
** General Editing
*** Undo
    I don't think I'll ever grok the built-in Emacs undo, and I've
    been at this for something like a decade. Tree-based history is
    sensible, so let's do that. We also shut off region-based undo
    because it's evidently quite buggy and I've never needed it,
    anyway.
    #+begin_src emacs-lisp
      (use-package undo-tree
	:hook (after-init . global-undo-tree-mode)
	:init
	(setq undo-tree-enable-undo-in-region nil)
	:blackout t)
    #+end_src
** Prose
*** Auto Fill
    I really really really don't ever want to hit =M-q= or type =gqip=
    if I don't have to.
    #+begin_src emacs-lisp
      (blackout 'auto-fill-mode)
      (add-hook 'text-mode-hook 'auto-fill-mode)
    #+end_src
*** Pretty Up Org
    #+begin_src emacs-lisp
      (use-package org-bullets
	:hook (org-mode . org-bullets-mode))
    #+end_src
** Keybindings
*** Discovery
**** =which-key=
     =which-key= is magical.
     #+begin_src emacs-lisp
       (use-package which-key
	 :hook (after-init . which-key-mode)
	 :commands (which-key-add-key-based-replacements which-key-setup-side-window-right-bottom)
	 :init
	 (setq which-key-enable-extended-define-key t)
	 (setq which-key-sort-order 'which-key-key-order-alpha)
	 :config
	 (which-key-setup-side-window-right-bottom)
	 :blackout)
     #+end_src
**** =discover-my-major=
     Occasionally I need to write bindings for a major mode because
     no one's gotten around to it, yet. Other times I just like to
     find cool stuff I've never used before.
     #+begin_src emacs-lisp
       (use-package discover-my-major
	 :commands (discover-my-major discover-my-mode))
     #+end_src
*** macOS Keys
    In order to avoid conflicts and make sure I always (or nearly
    always) have a corresponding Emacs key for each Evil mapping, I
    use the =Hyper= modifier extensively for my own bindings. I also
    don't use =Control= much, so it gets mapped a bit further out of
    range than the much more used =Meta= and =Hyper=. The
    duplicate-ish settings are for compatibility with the =railwaycat=
    port, which I occasionally decide seems like a good idea.
    #+begin_src emacs-lisp
      (the-with-operating-system macOS
	(setq ns-right-command-modifier 'none
	      ns-right-option-modifier 'none
	      ns-right-control-modifier 'control
	      ns-control-modifier 'super
	      ns-command-modifier 'meta
	      ns-option-modifier 'hyper
	      mac-right-command-modifier 'none
	      mac-right-option-modifier 'none
	      mac-right-control-modifier 'control
	      mac-control-modifier 'super
	      mac-command-modifier 'meta
	      mac-option-modifier 'hyper)
	(bind-keys
	 ("s-s" . save-buffer)
	 ("s-c" . copy-region-as-kill)
	 ("s-v" . yank))
	)
    #+end_src
*** Modal Editing
    #+begin_src emacs-lisp
      (use-package evil
	:hook (after-init . evil-mode)
	:init
	(setq evil-search-module 'evil-search)
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-vsplit-window-right t)
	(setq evil-split-window-below t))


      (use-package evil-collection
	:hook (after-init . evil-collection-init))
      (use-package evil-goggles
	:hook (after-init . evil-goggles-mode)
	:commands evil-goggles-use-diff-faces
	:config
	(evil-goggles-use-diff-faces)
	:blackout t)
      (use-package evil-lion
	:hook (after-init . evil-lion-mode))
      (use-package org-evil
	:hook (org-mode . org-evil-mode))
      (use-package evil-nerd-commenter
	:hook (after-init . evilnc-default-hotkeys))
      (use-package evil-matchit
	:hook (after-init . global-evil-matchit-mode))
      (use-package evil-surround
	:hook (after-init . global-evil-surround-mode))
      (use-package evil-magit
	:demand t
	:after magit)

      (use-package general
	:hook (after-init . general-evil-setup)
	:commands general-define-key
	:config
	(general-create-definer the-leader
				:prefix "SPC")

	(the-leader
	 :states '(normal visual motion)
	 "" '(nil :wk "leader")
	 "SPC" '(counsel-M-x :wk "extended command"))
	(defun the--leader-form (name key global)
	  `(general-create-definer ,(intern (s-concat "the-" name "-leader"))
				   :wrapping the-leader
				   :infix ,key
				   :global-prefix ,global))

	(defmacro the-make-leaders (leaders)
	  (dolist (leader leaders)
	    (eval (apply 'the--leader-form leader))))
	(the-make-leaders
	 (
	  ("help" "h" "H-h")
	  ("buffer" "b" "H-b")
	  ("window" "w" "H-w")
	  ("file" "f" "H-f")
	  ("application" "a" "H-a")
	  ("yank" "y" "H-y")
	  ("mode" "m" "H-m")
	  )
	 )

	(defun the--binding-form (leader &rest def)
	  `(,(intern (s-concat "the-" leader "-leader"))
	    :states '(normal)
	    "" '(nil :which-key ,(capitalize leader))
	    ,@def))

	(defmacro the-leader-bindings (keymaps)
	  (dolist (keymap keymaps)
	    (eval (apply 'the--binding-form keymap)))))
    #+end_src

** COMMENT Locals
   # Local Variables:
   # after-save-hook: the-reload-and-tangle-init-org
   # End:
